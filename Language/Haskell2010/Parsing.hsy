%module Language.Haskell2010.Parsing %where

%start module'
%trivial

%{
type Pos = (Int, Int)
type AS = Pos
type BACKQUOTE = Pos
type CASE = Pos
type CLASS = Pos
type COLON_COLON = Pos
type COMMA = Pos
type DARROW = Pos
type DATA = Pos
type DEFAULT = Pos
type DERIVING = Pos
type DO = Pos
type DOT_DOT = Pos
type ELSE = Pos
type EQUAL = Pos
type EXCL = Pos
type EXPORT = Pos
type FOREIGN = Pos
type HIDING = Pos
type IMPORT = Pos
type IF = Pos
type IN = Pos
type INFIX = Pos
type INFIXL = Pos
type INFIXR = Pos
type INSTANCE = Pos
type INTEGER = (Pos, Integer)
type LAMBDA = Pos
type LARROW = Pos
type LBRACE = Pos
type LBRACKET = Pos
type LET = Pos
type LPAREN = Pos
type MINUS = Pos
type MODULE = Pos
type NEWTYPE = Pos
type OF = Pos
type PIPE = Pos
type QCONID = (Pos, String)
type QCONSYM = (Pos, String)
type QUALIFIED = Pos
type QVARID = (Pos, String)
type QVARSYM = (Pos, String)
type RBRACE = Pos
type RBRACKET = Pos
type RARROW = Pos
type RPAREN = Pos
type SEMICOLON = Pos
type STRING = (Pos, String)
type THEN = Pos
type TYPE = Pos
type WHERE = Pos
%}

%%

def rule module' :=
  MODULE modid exports_opt WHERE body
| body

def rule body :=
  LBRACE topdecls RBRACE

def rule exports_opt :=
| exports

def rule exports :=
  LPAREN export_seq RPAREN

def rule export_seq :=
| export
| export COMMA export_seq

def rule export :=
  var
| con
| con LPAREN RPAREN
| con LPAREN DOT_DOT RPAREN
| con LPAREN cname_seq RPAREN
| MODULE modid

def rule import_seq :=
| import'
| import' COMMA import_seq

def rule import' :=
  var
| con
| con LPAREN RPAREN
| con LPAREN DOT_DOT RPAREN
| con LPAREN cname_seq RPAREN

def rule cname_seq :=
  cname
| cname COMMA cname_seq

def rule cname :=
  var
| con

def rule topdecls :=
  topdecl
| topdecl SEMICOLON topdecls

def rule topdecl :=
  IMPORT qualified_opt modid as_opt
| IMPORT qualified_opt modid as_opt LPAREN import_seq RPAREN
| IMPORT qualified_opt modid as_opt HIDING LPAREN import_seq RPAREN
| TYPE btype EQUAL type'
| DATA btype constrs_opt
| DATA btype constrs_opt DERIVING dclass
| DATA btype constrs_opt DERIVING LPAREN RPAREN
| DATA btype constrs_opt DERIVING LPAREN dclass_seq RPAREN
| DATA btype DARROW btype constrs_opt
| DATA btype DARROW btype constrs_opt DERIVING dclass
| DATA btype DARROW btype constrs_opt DERIVING LPAREN RPAREN
| DATA btype DARROW btype constrs_opt DERIVING LPAREN dclass_seq RPAREN
| NEWTYPE btype newconstr
| NEWTYPE btype newconstr DERIVING dclass
| NEWTYPE btype newconstr DERIVING LPAREN RPAREN
| NEWTYPE btype newconstr DERIVING LPAREN dclass_seq RPAREN
| NEWTYPE btype DARROW btype newconstr
| NEWTYPE btype DARROW btype newconstr DERIVING dclass
| NEWTYPE btype DARROW btype newconstr DERIVING LPAREN RPAREN
| NEWTYPE btype DARROW btype newconstr DERIVING LPAREN dclass_seq RPAREN
| CLASS btype cdecls_opt
| CLASS btype DARROW btype cdecls_opt
| INSTANCE btype idecls_opt
| INSTANCE btype DARROW btype idecls_opt
| DEFAULT LPAREN RPAREN
| DEFAULT LPAREN type_seq RPAREN
| FOREIGN fdecl
| decl

def rule decls :=
  LBRACE decl_seq RBRACE

def rule decl_seq :=
  decl
| decl SEMICOLON decl_seq

def rule decl :=
  gendecl
| pat EQUAL exp
| pat EQUAL exp WHERE decls
| pat PIPE gdrhs
| pat PIPE gdrhs WHERE decls

def rule cdecls_opt :=
| WHERE cdecls

def rule cdecls :=
  LBRACE cdecl_seq RBRACE

def rule cdecl_seq :=
  cdecl
| cdecl SEMICOLON cdecl_seq

def rule cdecl :=
  gendecl
| pat EQUAL exp
| pat EQUAL exp WHERE decls
| pat PIPE gdrhs
| pat PIPE gdrhs WHERE decls

def rule idecls_opt :=
| WHERE idecls

def rule idecls :=
  LBRACE idecl_seq RBRACE

def rule idecl_seq :=
  idecl
| idecl SEMICOLON idecl_seq

def rule idecl :=
| pat EQUAL exp
| pat EQUAL exp WHERE decls
| pat PIPE gdrhs
| pat PIPE gdrhs WHERE decls

def rule gendecl :=
| vars COLON_COLON type'
| vars COLON_COLON btype DARROW type'
| fixity integer_opt ops

def rule ops :=
  MINUS
| op
| MINUS COMMA ops
| op COMMA ops

def rule vars :=
  var
| var COMMA vars

def rule fixity :=
  INFIXL
| INFIXR
| INFIX

def rule type_seq :=
  type'
| type' COMMA type_seq

def rule type' :=
  btype
| btype RARROW type'

def rule btype :=
  atype
| btype atype

def rule atype :=
  gtycon
| tyvar
| LPAREN type_seq2 RPAREN
| LBRACKET type' RBRACKET
| LPAREN type' RPAREN
| EXCL atype

def rule type_seq2 :=
  type' COMMA type'
| type' COMMA type_seq2

def rule gtycon :=
  con
| LPAREN RPAREN
| LBRACKET RBRACKET
| LPAREN RARROW RPAREN
| LPAREN comma_list RPAREN

def rule comma_list :=
  COMMA
| COMMA comma_list

def rule constrs_opt :=
| EQUAL constrs

def rule constrs :=
  constr
| constr PIPE constrs

def rule constr :=
  btype
| btype conop btype
| con LBRACE RBRACE
| con LBRACE fielddecl_seq RBRACE

def rule newconstr :=
  EQUAL con atype
| EQUAL con LBRACE var COLON_COLON type' RBRACE

def rule fielddecl_seq :=
  fielddecl
| fielddecl COMMA fielddecl_seq

def rule fielddecl :=
  vars COLON_COLON type'

def rule dclass_seq :=
  dclass
| dclass COMMA dclass_seq

def rule dclass :=
  QCONID

def rule fdecl :=
  IMPORT callconv impent var COLON_COLON type'
| IMPORT callconv safety impent var COLON_COLON type'
| EXPORT callconv expent var COLON_COLON type'

def rule callconv :=
  AS
| EXPORT
| QVARID

def rule impent :=
  STRING

def rule expent :=
  STRING

def rule safety :=
  AS
| EXPORT
| QVARID

def rule gdrhs :=
  guards EQUAL exp
| guards EQUAL exp PIPE gdrhs

def rule guards :=
  guard
| guard COMMA guards

def rule guard :=
  infixexp LARROW exp
| LET decls
| infixexp

def rule exp :=
  infixexp

def rule infixexp :=
  LAMBDA pat RARROW exp
| LET decls IN exp
| IF exp semicolon_opt THEN exp semicolon_opt ELSE exp
| lexp MINUS exp
| lexp QVARSYM exp
| lexp BACKQUOTE AS BACKQUOTE exp
| lexp BACKQUOTE EXPORT BACKQUOTE exp
| lexp BACKQUOTE QVARID BACKQUOTE exp
| lexp QCONSYM exp
| lexp BACKQUOTE QCONID BACKQUOTE exp
| lexp COLON_COLON type'
| lexp COLON_COLON btype DARROW type'
| lexp

def rule lexp :=
  MINUS lexp
| CASE exp OF LBRACE alts RBRACE
| DO LBRACE stmts RBRACE
| fexp

def rule fexp :=
  aexp
| fexp aexp

def rule aexp :=
  var
| INTEGER
| STRING
| LPAREN exp RPAREN
| LPAREN QVARSYM infixexp RPAREN
| LPAREN BACKQUOTE AS BACKQUOTE infixexp RPAREN
| LPAREN BACKQUOTE EXPORT BACKQUOTE infixexp RPAREN
| LPAREN BACKQUOTE QVARID BACKQUOTE infixexp RPAREN
| LPAREN QCONSYM infixexp RPAREN
| LPAREN BACKQUOTE QCONID BACKQUOTE infixexp RPAREN

def rule alts :=
  alt
| alt SEMICOLON alts

def rule alt :=
  pat RARROW exp
| pat RARROW exp WHERE decls

def rule gdpat :=
  patguards RARROW exp
| patguards RARROW exp PIPE gdpat

def rule patguards :=
  patguard
| patguard COMMA patguards

def rule patguard :=
  infixexp LARROW infixexp
| LET decls
| infixexp

def rule stmts :=
  stmt
| stmt SEMICOLON stmts

def rule stmt :=
  infixexp
| infixexp LARROW infixexp
| LET decls

def rule pat :=
  apat
| pat apat
| pat MINUS apat
| pat op apat

def rule apat :=
  var
| LPAREN pat RPAREN

def rule var :=
  AS
| EXPORT
| QVARID
| LPAREN MINUS RPAREN
| LPAREN QVARSYM RPAREN

def rule con :=
  QCONID
| LPAREN QCONSYM RPAREN

def rule varop :=
  QVARSYM
| BACKQUOTE AS BACKQUOTE
| BACKQUOTE EXPORT BACKQUOTE
| BACKQUOTE QVARID BACKQUOTE

def rule conop :=
  QCONSYM
| BACKQUOTE QCONID BACKQUOTE

def rule op :=
  varop
| conop

def rule as_opt :=
| AS modid

def rule qualified_opt :=
| QUALIFIED

def rule tyvar :=
  AS
| EXPORT
| QVARID

def rule tycls :=
  QCONID

def rule modid :=
  QCONID

def rule integer_opt :=
| INTEGER

def rule semicolon_opt :=
| SEMICOLON
%%
