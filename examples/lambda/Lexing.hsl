%module Lexing %where

%{
import qualified Control.Monad.State as State
import qualified Control.Monad.Trans as MonadTrans
import qualified Parsing
%}

%%

case (Initial, "Î»") => saLambda
case (Initial, ".") => saDot
case (Initial, "(") => saLParen
case (Initial, ")") => saRParen
case (Initial, ['a'-'z'|'A'-'Z'|'_']['a'-'z'|'A'-'Z'|'0'-'9'|'_']*) => saId
case (Initial, [' ' '\t' '\n' '\v' '\f' '\r']) => saSpace

%%

withPosition :: (Int -> Int -> String -> Maybe Parsing.Token) -> String -> Lexing (State.State Int) (Maybe Parsing.Token)
withPosition f yytext = do
  let n = length yytext
  pos <- MonadTrans.lift State.get
  MonadTrans.lift $ State.put $ pos + n
  return $ f pos n yytext

semanticActions :: SemanticActions (State.State Int) (Maybe Parsing.Token)
semanticActions = SemanticActions
  { saLambda = withPosition $ curry $ const . Just . Parsing.LAMBDA
  , saDot = withPosition $ curry $ const . Just . Parsing.DOT
  , saLParen = withPosition $ curry $ const . Just . Parsing.LPAREN
  , saRParen = withPosition $ curry $ const . Just . Parsing.RPAREN
  , saId = withPosition $ curry $ curry $ Just . Parsing.ID
  , saSpace = withPosition $ const $ const $ const Nothing }
