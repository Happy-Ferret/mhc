%module Language.HsYacc.Lexing %where

%{
import qualified Language.HsYacc.Parsing as Parsing
%}

%%

case (Initial, Zs) => initialSpace
case (Initial, "\r\n" | '\r' | '\n' | '\f') => initialNewline
case (Initial, ":=") => initialColonEq
case (Initial, "def") => initialDef
case (Initial, "%{") => initialPLBrace
case (Initial, "%module") => initialPModule
case (Initial, "%%") => initialPP
case (Initial, "|") => initialPipe
case (Initial, "%where") => initialPWhere
case (Initial, "%start") => initialPStart
case (Initial, "%trivial") => initialPTrivial
case (Initial, "%}") => initialPRBrace
case (Initial, "rule") => initialRule
case (Initial, (Lu | Lt)((Ll | '_') | Lu | Lt | Nd | '\'')*) => initialTerminal
case (Initial, (Ll | '_')((Ll | '_') | Lu | Lt | Nd | '\'')*) => initialNonterminal
case (Initial, .) => initialCode

case (Rule, Zs) => ruleSpace
case (Rule, "\r\n" | '\r' | '\n' | '\f') => ruleNewline
case (Rule, ":=") => ruleColonEq
case (Rule, "def") => ruleDef
case (Rule, "%{") => rulePLBrace
case (Rule, "%module") => rulePModule
case (Rule, "%%") => rulePP
case (Rule, "|") => rulePipe
case (Rule, "%where") => rulePWhere
case (Rule, "%start") => rulePStart
case (Rule, "%trivial") => rulePTrivial
case (Rule, "%}") => rulePRBrace
case (Rule, "rule") => ruleRule
case (Rule, (Lu | Lt)((Ll | '_') | Lu | Lt | Nd | '\'')*) => ruleTerminal
case (Rule, (Ll | '_')((Ll | '_') | Lu | Lt | Nd | '\'')*) => ruleNonterminal
case (Rule, .) => ruleCode

case (Code, "%{") => codePLBrace
case (Code, "%module") => codePModule
case (Code, "%%") => codePP
case (Code, "%where") => codePWhere
case (Code, "%start") => codePStart
case (Code, "%trivial") => codePTrivial
case (Code, "%}") => codePRBrace
case (Code, .) => codeCode

%%

semanticActions :: Monad m => SemanticActions m (Maybe Parsing.Token)
semanticActions = SemanticActions
  { initialSpace = const $ return Nothing
  , initialNewline = const $ return Nothing
  , initialColonEq = const $ return $ Just $ Parsing.COLONEQ ()
  , initialDef = const $ return $ Just $ Parsing.DEF ()
  , initialRule = const $ return $ Just $ Parsing.RULE ()
  , initialPLBrace = const $ do { yybegin Code; return $ Just $ Parsing.PLBRACE () }
  , initialPModule = const $ do { yybegin Code; return $ Just $ Parsing.PMODULE () }
  , initialPP = const $ do { yybegin Rule; return $ Just $ Parsing.PP () }
  , initialPipe = const $ return $ Just $ Parsing.PIPE ()
  , initialPWhere = const $ return $ Just $ Parsing.PWHERE ()
  , initialPStart = const $ return $ Just $ Parsing.PSTART ()
  , initialPTrivial = const $ return $ Just $ Parsing.PTRIVIAL ()
  , initialPRBrace = const $ return $ Just $ Parsing.PRBRACE ()
  , initialTerminal = return . Just . Parsing.TERMINAL
  , initialNonterminal = return . Just . Parsing.NONTERMINAL
  , initialCode = return . Just . Parsing.CODE . head
  , ruleSpace = const $ return Nothing
  , ruleNewline = const $ return Nothing
  , ruleColonEq = const $ return $ Just $ Parsing.COLONEQ ()
  , ruleDef = const $ return $ Just $ Parsing.DEF ()
  , ruleRule = const $ return $ Just $ Parsing.RULE ()
  , rulePLBrace = const $ do { yybegin Code; return $ Just $ Parsing.PLBRACE () }
  , rulePModule = const $ do { yybegin Code; return $ Just $ Parsing.PMODULE () }
  , rulePP = const $ do { yybegin Code; return $ Just $ Parsing.PP () }
  , rulePipe = const $ return $ Just $ Parsing.PIPE ()
  , rulePWhere = const $ return $ Just $ Parsing.PWHERE ()
  , rulePStart = const $ return $ Just $ Parsing.PSTART ()
  , rulePTrivial = const $ return $ Just $ Parsing.PTRIVIAL ()
  , rulePRBrace = const $ return $ Just $ Parsing.PRBRACE ()
  , ruleTerminal = return . Just . Parsing.TERMINAL
  , ruleNonterminal = return . Just . Parsing.NONTERMINAL
  , ruleCode = return . Just . Parsing.CODE . head
  , codePLBrace = const $ do { yybegin Code; return $ Just $ Parsing.PLBRACE () }
  , codePModule = const $ do { yybegin Code; return $ Just $ Parsing.PMODULE () }
  , codePP = const $ return $ Just $ Parsing.PP ()
  , codePWhere = const $ do { yybegin Initial; return $ Just $ Parsing.PWHERE () }
  , codePStart = const $ return $ Just $ Parsing.PSTART ()
  , codePTrivial = const $ return $ Just $ Parsing.PTRIVIAL ()
  , codePRBrace = const $ do { yybegin Initial; return $ Just $ Parsing.PRBRACE () }
  , codeCode = return . Just . Parsing.CODE . head }
